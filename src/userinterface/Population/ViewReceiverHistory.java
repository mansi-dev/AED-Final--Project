/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.Population;

import Business.EcoSystem;
import Business.Enterprise.BloodBankEnterprise;
import Business.Enterprise.Enterprise;
import Business.Enterprise.HospitalEnterprise;
import Business.Enterprise.PopulationEnterprise;
import Business.Network.Network;
import Business.Organization.BloodBankOrganization;
import Business.Organization.Organizations;
import Business.Organization.PersonOrganization;
import Business.Population.Person;
import Business.Population.PersonDirectory;
import Business.Population.ReceiverTransaction;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.RecieverBloodWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.util.List;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author neeraja
 */
public class ViewReceiverHistory extends javax.swing.JPanel {

    /**
     * Creates new form ViewReceiverHistory
     */
    PersonDirectory personDirectory;
    JPanel userProcessContainer;
    EcoSystem business;
    Enterprise enterprise;
    UserAccount userAccount;
    public ViewReceiverHistory(JPanel userProcessContainer, EcoSystem business, Enterprise enterprise, UserAccount userAccount) {
        this.business = business;
        this.userAccount = userAccount;
        this.enterprise = enterprise;
               initComponents();

        viewReceiverHist();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        receiverLbl1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        receiverTbl = new javax.swing.JTable();
        btnUpdateReceiver = new javax.swing.JButton();
        trnLbl1 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        receiverTrnTbl = new javax.swing.JTable();
        btnUpdateTrn = new javax.swing.JButton();
        btnDeleteTrn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel3.setText("View Receiver History");

        receiverLbl1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        receiverLbl1.setText("Receiver Details:");

        receiverTbl.setBackground(new java.awt.Color(255, 204, 204));
        receiverTbl.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        receiverTbl.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        receiverTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "", "ID", "Name", "Email", "Phone Number", "Blood Group"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        receiverTbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                receiverTblMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(receiverTbl);
        if (receiverTbl.getColumnModel().getColumnCount() > 0) {
            receiverTbl.getColumnModel().getColumn(0).setMinWidth(1);
            receiverTbl.getColumnModel().getColumn(0).setPreferredWidth(1);
            receiverTbl.getColumnModel().getColumn(0).setMaxWidth(1);
        }

        btnUpdateReceiver.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnUpdateReceiver.setText("Update");
        btnUpdateReceiver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateReceiverActionPerformed(evt);
            }
        });

        trnLbl1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        trnLbl1.setText("Transaction Details:");

        receiverTrnTbl.setBackground(new java.awt.Color(255, 204, 204));
        receiverTrnTbl.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        receiverTrnTbl.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        receiverTrnTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "", "Age", "Height", "Weight", "Hemoglobin Level", "Number of Units", "Organization Name", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(receiverTrnTbl);
        if (receiverTrnTbl.getColumnModel().getColumnCount() > 0) {
            receiverTrnTbl.getColumnModel().getColumn(0).setMinWidth(1);
            receiverTrnTbl.getColumnModel().getColumn(0).setPreferredWidth(1);
            receiverTrnTbl.getColumnModel().getColumn(0).setMaxWidth(1);
        }

        btnUpdateTrn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnUpdateTrn.setText("Update");
        btnUpdateTrn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateTrnActionPerformed(evt);
            }
        });

        btnDeleteTrn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnDeleteTrn.setText("Delete");
        btnDeleteTrn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteTrnActionPerformed(evt);
            }
        });

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/receiver.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(receiverLbl1)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 1046, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(trnLbl1)
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(255, 255, 255)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnUpdateReceiver))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 1050, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(btnUpdateTrn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnDeleteTrn)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jLabel2)))
                .addGap(16, 16, 16)
                .addComponent(receiverLbl1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnUpdateReceiver)
                .addGap(90, 90, 90)
                .addComponent(trnLbl1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdateTrn)
                    .addComponent(btnDeleteTrn))
                .addGap(15, 15, 15))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void receiverTblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_receiverTblMouseClicked
        // TODO add your handling code here:
        System.out.println("Table row clicked");
        DefaultTableModel model = (DefaultTableModel) receiverTrnTbl.getModel();

        JTable target = (JTable) evt.getSource();
        int row = target.getSelectedRow(); // select a row
        Person person = (Person) receiverTbl.getValueAt(row, 0);
        List<ReceiverTransaction> transaction = person.getReceiverTransaction();
        model.setRowCount(0);
        String bloodGroup = person.getBloodGroup();
        for (ReceiverTransaction data : transaction) {
            Object[] rowTrn = new Object[8];
            //row[0] = ++index;
            
            rowTrn[0] = data;
            rowTrn[1] = data.getAge();
            rowTrn[2] = data.getWeight();
            rowTrn[3] = data.getHeight();
            rowTrn[4] = data.getHblevel();
            rowTrn[5] = data.getNumberOfUnits();
            rowTrn[6] = data.getHospital().getName();
            rowTrn[7] = data.getPrice();

            model.addRow(rowTrn);
        }
    }//GEN-LAST:event_receiverTblMouseClicked

    private void btnUpdateReceiverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateReceiverActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) receiverTbl.getModel();
        int rowIndex = receiverTbl.getSelectedRow();
        int colIndex = 0;

        Vector dataVector = model.getDataVector();
        Vector elementAt = (Vector) dataVector.elementAt(rowIndex);
        Person personDetails = null;
        
        Person person = (Person) model.getValueAt(rowIndex, colIndex);
        if (!elementAt.get(1).toString().isEmpty() && !elementAt.get(2).toString().isEmpty() && !elementAt.get(3).toString().isEmpty() 
                && !elementAt.get(4).toString().isEmpty() && !elementAt.get(5).toString().isEmpty()) {

            try {
                if (personDetails == null) {
                    person.setId(Integer.parseInt(elementAt.get(1).toString()));
                    person.setName(elementAt.get(2).toString());
                    person.setEmail(elementAt.get(3).toString());
                    person.setPhoneNum(Long.parseLong(elementAt.get(4).toString()));
                    person.setBloodGroup(elementAt.get(4).toString());
                    

                    JOptionPane.showMessageDialog(this, "Value updated successfully!");

                } else {
                    JOptionPane.showMessageDialog(this, "Receiver with given id already exists!");
                }
            } catch (NumberFormatException | NullPointerException exception) {

                JOptionPane.showMessageDialog(this, "Please enter all values.");

            }
        } else {
            JOptionPane.showMessageDialog(this, "Please enter all values.");
        }
    }//GEN-LAST:event_btnUpdateReceiverActionPerformed

    private void btnUpdateTrnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateTrnActionPerformed
        // TODO add your handling code here:
       int selectedRowIndex = receiverTrnTbl.getSelectedRow();
        DefaultTableModel modelTrn = (DefaultTableModel) receiverTrnTbl.getModel();
        RecieverBloodWorkRequest person = (RecieverBloodWorkRequest) modelTrn.getValueAt(selectedRowIndex, 0);
        Vector dataVector = modelTrn.getDataVector();
        Vector elementAt = (Vector) dataVector.elementAt(selectedRowIndex);


       // Encounter encounter = (Encounter) model.getValueAt(rowIndexVitals, colIndex);
if (!elementAt.get(2).toString().isEmpty() && !elementAt.get(3).toString().isEmpty() && !elementAt.get(4).toString().isEmpty()
                && !elementAt.get(5).toString().isEmpty() && !elementAt.get(6).toString().isEmpty() && !elementAt.get(7).toString().isEmpty()) {
            
            
            
            person.getReceiverTransaction().setAge(Integer.parseInt(elementAt.get(1).toString()));
            person.getReceiverTransaction().setWeight(Float.parseFloat(elementAt.get(3).toString()));
            person.getReceiverTransaction().setHeight(Float.parseFloat(elementAt.get(2).toString()));
            person.getReceiverTransaction().setHblevel(Float.parseFloat(elementAt.get(4).toString()));
            person.getReceiverTransaction().setNumberOfUnits(Integer.parseInt(elementAt.get(5).toString()));
            //receiverT.setOtherDiseases(Boolean.parseBoolean(elementAt.get(8).toString()));
            person.getReceiverTransaction().setPrice(Float.parseFloat(elementAt.get(7).toString()));
            
            JOptionPane.showMessageDialog(this, "Value updated successfully!");

        }else {
            JOptionPane.showMessageDialog(this, "Please enter all values.");
        }
    }//GEN-LAST:event_btnUpdateTrnActionPerformed

    private void btnDeleteTrnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteTrnActionPerformed
        int selectedRowIndex = receiverTrnTbl.getSelectedRow();
        long phoneNum = this.userAccount.getUser().getPhoneNum();
        
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to delete");
            return;
        }

        DefaultTableModel modelTrn = (DefaultTableModel) receiverTrnTbl.getModel();
        RecieverBloodWorkRequest person = (RecieverBloodWorkRequest) modelTrn.getValueAt(selectedRowIndex, 0);
        ReceiverTransaction receiverTransaction = person.getReceiverTransaction();
        //DonorTransaction donorTransaction = (DonorTransaction) modelTrn.getValueAt(selectedRowIndex, 0);
        for (Network n : this.business.getNetworkList()) {
            for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
                if (e instanceof BloodBankEnterprise) {
                    for (Organizations org : e.getOrganizationDirectory().getOrganizationList()) {
                        if (org instanceof BloodBankOrganization) {
                            DefaultTableModel modelR = (DefaultTableModel) receiverTrnTbl.getModel();
                            modelR.setRowCount(0);
                            org.getWorkQueue().getWorkRequestList().remove(person);
                        }
                    }
                }
                if (e instanceof PopulationEnterprise) {
                    for (Organizations org : e.getOrganizationDirectory().getOrganizationList()) {
                        if (org instanceof PersonOrganization) {
                            DefaultTableModel modelR = (DefaultTableModel) receiverTrnTbl.getModel();
                            modelR.setRowCount(0);
                           PersonOrganization p = (PersonOrganization) org;
                           p.getPersonDirectory().getPersonByPhoneNum(phoneNum).removeRecieverTransaction(receiverTransaction);
                        }
                    }
                }
            }
        }
        viewReceiverHist();
        //person.removeDonorTransaction(donorTransaction);
       // modelTrn.removeRow(selectedRowIndex);
        JOptionPane.showMessageDialog(this, "Receiver Transaction deleted");
    }//GEN-LAST:event_btnDeleteTrnActionPerformed

    private void viewReceiverHist(){
       DefaultTableModel model = (DefaultTableModel) receiverTbl.getModel();
        model.setRowCount(0);
        
        Person person = (Person) this.userAccount.getUser();
        Object[] row = new Object[6];
        row[0] = person;
        row[1] = person.getId();
        row[2] = person.getName();
        row[3] = person.getEmail();
        row[4] = person.getPhoneNum();
        row[5] = person.getBloodGroup();
        
        model.addRow(row);
        
        for (Network n : this.business.getNetworkList()) {
            for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
                if (e instanceof HospitalEnterprise) {
                    for (Organizations org : e.getOrganizationDirectory().getOrganizationList()) {
                        if (org instanceof BloodBankOrganization) {
                            DefaultTableModel modelR = (DefaultTableModel) receiverTbl.getModel();
                            modelR.setRowCount(0);
                            for (WorkRequest request : org.getWorkQueue().getWorkRequestList()) {
                                if (request instanceof RecieverBloodWorkRequest) {
                                    
                                    Object[] rowTrn = new Object[8];
                                    //row[0] = ++index;

                                    rowTrn[0] = request;
                                    rowTrn[1] = ((RecieverBloodWorkRequest) request).getReceiverTransaction().getAge();
                                    rowTrn[2] = ((RecieverBloodWorkRequest) request).getReceiverTransaction().getHeight();
                                    rowTrn[3] = ((RecieverBloodWorkRequest) request).getReceiverTransaction().getWeight();
                                    rowTrn[4] = ((RecieverBloodWorkRequest) request).getReceiverTransaction().getHblevel();
                                    rowTrn[5] = ((RecieverBloodWorkRequest) request).getReceiverTransaction().getNumberOfUnits();
                                    rowTrn[6] = ((RecieverBloodWorkRequest) request).getReceiverTransaction().getHospital().getName();
                                    rowTrn[7] = ((RecieverBloodWorkRequest) request).getReceiverTransaction().getPrice();
                                   
                                    modelR.addRow(rowTrn);
                                }
                            }
                            break;
                        }
                    }
                    break;
                }
            }
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeleteTrn;
    private javax.swing.JButton btnUpdateReceiver;
    private javax.swing.JButton btnUpdateTrn;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel receiverLbl1;
    private javax.swing.JTable receiverTbl;
    private javax.swing.JTable receiverTrnTbl;
    private javax.swing.JLabel trnLbl1;
    // End of variables declaration//GEN-END:variables
}
